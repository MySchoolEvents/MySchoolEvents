import Head from "next/head";
import CoursesContent from "@/components/course-components/CoursesContent";
import CustomAppShell from "@/components/CustomAppShell";
import { useState, Children } from "react";
import AddCourseModal from "@/components/course-components/AddCourseModal";
import { IconBooks } from "@tabler/icons";
import EditCourseModal from "@/components/course-components/EditCourseModal";
import CourseCard from "@/components/course-components/CourseCard";
import { createStyles } from "@mantine/core";
import { v4 as uuidv4 } from "uuid";
import { GetServerSideProps } from "next";
import { loadCourses } from "@/helpers/FirebaseHelpers";
import { UserAuth } from "@/context/AuthContext";
import React from "react";
import nookies from "nookies";
import { GetServerSidePropsContext } from "next";
import { admin } from "@/firebase/admin";

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  try {
    const cookies = nookies.get(ctx);
    const token = await admin.auth().verifyIdToken(cookies.token);

    const { uid } = token;
    const courses = await loadCourses(uid);

    return {
      props: {
        courses: courses,
      },
    };
  } catch (err) {
    // either the `token` cookie didn't exist
    // or token verification failed
    // either way: redirect to the login page
    ctx.res.writeHead(302, { Location: "/auth" });
    ctx.res.end();

    // The props returned here don't matter because we've
    // already redirected the user.
    return { props: {} as never };
  }
};

type CoursesProps = {
  courses:
  | {
    title: string;
    teacher: string;
    previewIconIndex: number;
    backgroundColorIndex: number;
    id: string;
  }[]
  | [];
};

export default function Courses({ courses }: CoursesProps) {
  const [addCourseModalIsOpen, setAddCourseModalIsOpen] = useState(false);
  const [editCourseModalIsOpen, setEditCourseModalIsOpen] = useState(false);
  const [currentCourseProperties, setCurrentCourseProperties] = useState({
    title: "",
    teacher: "",
    icon: <IconBooks size={30} />,
    iconIndex: 0,
    backgroundColorIndex: 0,
    index: 0,
    id: "",
  });
  const [courseArray, setCourseArray] = useState(courses);

  return (
    <>
      <Head>
        <title>CAP23</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <AddCourseModal
          courseArray={courseArray}
          setCourseArray={setCourseArray}
          addCourseModalIsOpen={addCourseModalIsOpen}
          setAddCourseModalIsOpen={setAddCourseModalIsOpen}
        />
        <EditCourseModal
          courseArray={courseArray}
          setCourseArray={setCourseArray}
          editCourseModalIsOpen={editCourseModalIsOpen}
          setEditCourseModalIsOpen={setEditCourseModalIsOpen}
          currentCourseProperties={currentCourseProperties}
          setCurrentCourseProperties={setCurrentCourseProperties}
        />
        {/* @ts-ignore */}
        <CustomAppShell selectedTab="courses">
          <CoursesContent
            setAddCourseModalIsOpen={setAddCourseModalIsOpen}
            setEditCourseModalIsOpen={setEditCourseModalIsOpen}
            setCurrentCourseProperties={setCurrentCourseProperties}
            courseArray={courseArray}
            setCourseArray={setCourseArray}
          />
        </CustomAppShell>
      </main>
    </>
  );
}
